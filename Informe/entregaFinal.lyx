#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Trabajo Práctico Especial
\end_layout

\begin_layout Standard
Objetivo: Realizar un programa que muestre algunas de las características
 del Modo protegido de los microprocesadores de Intel.
 
\end_layout

\begin_layout Section
Implementacion
\end_layout

\begin_layout Standard
En esta sección se explicará el funcionamiento interno del sistema operativo
 desarollado y por qué se eligió tal implementación.
\end_layout

\begin_layout Standard
Para una buena organización del código, se optó por realizar varios archivos
 que se encargaran de manejar tareas específicas (un estilo 
\begin_inset Formula $"objetoso"$
\end_inset

) y de este modo poder lograr un programa modularizado y por sobre todo
 implementable.
\end_layout

\begin_layout Standard
A continuación se listan los archivos que se han considerado como los mas
 importantes:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Itemize

\bar under
Interrupt:
\bar default
 Cada vez que llega una iterrupcion al micro (ya sea por software o por
 harware), se ejecuta el handler correspondiente (programado en ASM) que
 se ocupa de llamar a la función handler en 
\begin_inset Formula $C$
\end_inset

 que la maneja.
 Aquí es donde entra en juego el archivo Interrupt.c.
 Este contiene la logica necesaria para cada interrupcion.
\end_layout

\begin_deeper
\begin_layout Standard
Actualmente solo se manejan las interrupciones 
\begin_inset Formula $80h$
\end_inset

, 
\begin_inset Formula $9$
\end_inset


\begin_inset Formula $(teclado)$
\end_inset

, y la 
\begin_inset Formula $8$
\end_inset


\begin_inset Formula $(timer$
\end_inset

 
\begin_inset Formula $tick)$
\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\bar under
Keyboard:
\bar default
 Luego de leido el scanCode de la tecla presionada (desde el manejador de
 la interrupción correspondiente), se 
\begin_inset Quotes eld
\end_inset

avisa
\begin_inset Quotes erd
\end_inset

 a este archivo el scanCode y este se encarga de guardar el caracter que
 corresponda en el buffer del teclado.
\end_layout

\begin_deeper
\begin_layout Standard
Para el buffer de teclado de decidió implementar un buffer circular, en
 donde cada vez que llega un caracter, se agrega al a continuacion del anterior
 (se ignora si se llego o no al final del arreglo).
 Esto tiene la ventaja que nunca hace falta limpiar el buffer ya que aunque
 se llene, solo hay que 
\begin_inset Quotes eld
\end_inset

tomar
\begin_inset Quotes erd
\end_inset

 las caracteres no leidos del buffer para que automaticamente se haga lugar
 para las nuevas.
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\bar under
Video:
\bar default
 Funciona como un controlador de video.
 Es el encargado de administrar la porción de memoria asigada a memoria.
 Ya que por cada caracter que se quiera mostrar, hay que decidir en que
 columna hay que ponerlo, en que fila y con que colores; se decidió que
 seria muy útil tener este controlador.
 
\end_layout

\begin_deeper
\begin_layout Standard
Siempre que por 
\begin_inset Formula $io$
\end_inset

 se indica que se quiere escribir un buffer por la 
\begin_inset Formula $salida$
\end_inset

 
\begin_inset Formula $estadard$
\end_inset

, se llama a este controlador para que se graben adecuadamente.
\end_layout

\begin_layout Standard
Si bien en memoria el sector destinado para la pantalla es contínuo, se
 implemto todo como si se estuviese trabajando sobre una matriz (
\begin_inset Formula $getCurrRow()$
\end_inset

 y 
\begin_inset Formula $getCurrColumn()$
\end_inset

 se encargan de realizar las transormaciones matemáticas correspondientes).
\begin_inset Newline newline
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\bar under
Shell:
\bar default
 Se encarga de tomar los caracteres del buffer del teclado (siempre que
 los haya) y decidir si se muestran o no en pantalla.
 En la actual implementación, se tiene una shell con un buffer de tamaño
 fijo en donde se van guardando los caracteres tomados del buffer del teclado.
 Cuando el usuario indica que quiere ejecutar el comando ingresado, se busca
 si lo escrito coincide con el nombre de algún comando que tiene guardado
 internamente en el vector de comandos.
\end_layout

\begin_deeper
\begin_layout Itemize
Vector de comandos: Es un vector de estructuras en donde cada elemento es
 una estructua que contiene: nombre de comando, puntero a la función que
 ejecuta dicho comando y un char* que es la ayuda del comando.
\end_layout

\begin_layout Standard
Actualmente la shell es capaz de aceptar argumentos por línea de comandos.
 Esto fue logrado con relativa facilidad gracias a que se convino que todos
 los comandos recibirian los mismos argumentos, por lo que, visto desde
 esta perspectiva, invocar a uno u otro comando con los argumentos tomados
 es indiferente.
\end_layout

\end_deeper
\begin_layout Itemize

\bar under
Commands:
\bar default
 Aquí se encuentra la rutina de cada comando mencionado en el punto anterior.
 Para ver una lista de comandos que se ofrecen basta ejecutar 
\begin_inset Formula $“help”$
\end_inset

.
\end_layout

\begin_layout Itemize

\bar under
Kernel: 
\bar default
Esta es la parte mas imprtante de la implentación ya que, siempre que se
 desea realiza un 
\begin_inset Formula $read$
\end_inset

 o un 
\begin_inset Formula $write$
\end_inset

, es realizado siempre a través de este.
\end_layout

\begin_deeper
\begin_layout Standard
Tal como sugería el archivo 
\begin_inset Formula $kernel.h$
\end_inset

 suministrado por la cetdra, se ofrecen dos métodos, __
\begin_inset Formula $read$
\end_inset

 y __
\begin_inset Formula $write$
\end_inset

.
 Uno de los parámetros requeridos, es el 
\begin_inset Formula $file$
\end_inset

 
\begin_inset Formula $descriptor$
\end_inset

 que indica a donde se quiere acceder.
 Actualmente se tienen implementados 
\begin_inset Formula $tres$
\end_inset

 tipos de 
\begin_inset Formula $file$
\end_inset

 
\begin_inset Formula $descriptors$
\end_inset

:
\end_layout

\begin_layout Itemize
Si se quiere escribir en 
\begin_inset Formula $pantalla$
\end_inset

, se realiza un __
\begin_inset Formula $write$
\end_inset

 con parámetro 
\begin_inset Formula $STD$
\end_inset

_
\begin_inset Formula $OUT$
\end_inset

 o bien 
\begin_inset Formula $STD$
\end_inset

_
\begin_inset Formula $ERR$
\end_inset

.
 
\end_layout

\begin_layout Itemize
Si se quiere leer del 
\begin_inset Formula $teclado$
\end_inset

, se realiza un __
\begin_inset Formula $read$
\end_inset

 con parámetro 
\begin_inset Formula $STD$
\end_inset

_
\begin_inset Formula $IN$
\end_inset

.
\end_layout

\begin_layout Standard
Cada vez que alguna de estas funciones es invocada, se ejectua un _
\begin_inset Formula $SystemCall$
\end_inset

 (llamda a ASM) quien se ocupa de invocar a la interupcion 
\begin_inset Formula $int80h$
\end_inset

 y esta es manejada (como ya se mencionó) por el 
\begin_inset Formula $int80$
\end_inset

 
\begin_inset Formula $handler$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Section
Manual de uso
\end_layout

\begin_layout Standard
Para ver cuáles son los comandos disponibles, basta con ejecutar el comando
 
\begin_inset Formula $help$
\end_inset

.
\end_layout

\begin_layout Standard
Para ejecutar cualquier comando valido, basta escribir 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $nombreComando$
\end_inset

 
\begin_inset Formula $argumentos$
\end_inset

 
\begin_inset Formula $separados$
\end_inset

 
\begin_inset Formula $por$
\end_inset

 
\begin_inset Formula $espacios$
\end_inset


\begin_inset Quotes erd
\end_inset

 por ej, si se invoca al comando 
\begin_inset Formula $help$
\end_inset

 
\begin_inset Formula $random$
\end_inset

, se desplegará un menú con una breve explicación de como funciona el comando
 random.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsection
Comandos actualmente disponibles:
\end_layout

\begin_layout Itemize
help
\end_layout

\begin_layout Itemize
echo
\end_layout

\begin_layout Itemize
restart
\end_layout

\begin_layout Itemize
clear
\end_layout

\begin_layout Itemize
getCPUspeed
\end_layout

\begin_layout Itemize
countDown
\end_layout

\begin_layout Itemize
setPit
\end_layout

\begin_layout Itemize
resetPit
\end_layout

\begin_layout Itemize
random
\end_layout

\begin_layout Itemize
setAppareance
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Observaciones: 
\end_layout

\begin_layout Itemize
Notar que se considera a cada espacio como un nuevo argumento.
 Por lo que la invoación a una función con varios espacios en entre los
 argumentos, es lo mismo que mandar un argumento 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

 (char * apuntando a un 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
'
\backslash
0'
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
\color inherit
) en el medio.
 
\end_layout

\begin_layout Itemize
Si se colocan espacios al principio de cada comando, el resultado final
 no debe esperarse igual a que poner el comando sin los espacios.
 Es decir: 
\begin_inset Quotes erd
\end_inset

 echo
\begin_inset Quotes erd
\end_inset

 no ejecutará el comando llamado 
\begin_inset Quotes eld
\end_inset

echo
\begin_inset Quotes erd
\end_inset

 (sin espacio al principio)
\end_layout

\begin_layout Section
CPU Speed
\end_layout

\begin_layout Subsection
Notas
\end_layout

\begin_layout Standard
Para el cálculo de la velocidad de la CPU se tuvieron en cuenta los siguientes
 factores:
\end_layout

\begin_layout Standard
Antes de realizar el cálculo de la velocidad, se testea la presencia de
 
\series bold
cpuid
\series default
\emph on
.
 
\emph default
Si el test pasa, se procede a chequear la presencia de
\emph on
 
\series bold
\emph default
rdtsc 
\series default
o 
\series bold
rdmsr
\series default
.
 Si existe algúna de ellas, se procede con el testeo.
\end_layout

\begin_layout Standard
El cálculo de la velocidad es el resultado de un promedio de 
\emph on
n
\emph default
 llamadas a la función que realiza el cálculo.
\end_layout

\begin_layout Standard
Para realizar esta función, fue necesario implementar algo parecido al funcionam
iento del Bios (40h:6Ch), por lo que en cada irq0, se incrementa un contador.
\end_layout

\begin_layout Subsection
Out-of-Order-Execution e Instrucciones Serializadoras
\end_layout

\begin_layout Standard
A partir de la familia de procesadores 
\emph on
Pentium II
\emph default
 y 
\emph on
Pentium Pro, 
\emph default
apareció algo llamado 
\series bold
\emph on
out-of-order-execution
\series default
\emph default
.
 Ésto significa que las instrucciónes no necesariamente son llamadas en
 el órden en el que aparecen en el código.
 Esto es un problema, dado que para medir la velocidad, es necesario que
 las funciones de 
\series bold
rdtsc 
\series default
o 
\series bold
rdmsr
\series default
 se ejecuten en el momento requerido.
 Para solucionarlo, es necesario el uso de una instrucción serializadora.
 El objetivo de ésta es forzar al procesador que termine todas las modificacione
s pendientes a los flags, registros y memoria por instrucciones anteriores
 antes de buscar y ejecutar la próxima instrucción.
 Ésto asegura que 
\series bold
rdtsc
\series default
 se ejecute cuando es debido y no antes.
\end_layout

\begin_layout Standard
Teniendo ésto, el código para medir la velocidad de la cpu es simple.
\end_layout

\begin_layout Subsection
Implementación
\end_layout

\begin_layout Standard
Se carga inicialmente el valor del contador de irq0s en ebx, y se espera
 al próximo tick.
 Una vez que éste sucede, se llama a 
\series bold
rdtsc 
\series default
para conseguir el 
\emph on
time stamp counter
\emph default
,
\emph on
 
\emph default
y se lo almacena en 2 variables (parte baja y alta).
 Luego, se incrementa a ebx en 
\emph on
intervalo + 1
\emph default
 (el + 1 es debido a que en éste momento, ebx es 
\emph on
irq0 counter - 1
\emph default
).
 Se espera a que el irq0 counter llegue al valor de ebx, y se realiza otra
 medición con 
\series bold
rdtsc
\series default
.
 Una vez obtenida, se resta a eax, el valor de la parte baja de rdtsc almacenada
 anteriormente, y a edx, se le resta con borrow el valor de la parte alta
 almacenada.
 Teniendo en eax la diferencia del 
\emph on
time stamp counter
\emph default
, se procede a dividirlo por uno dividido la frecuencia del pit (18.2) y
 multiplicarlo por un millon (para acomodar el resultado a MHz) y multiplicarlo
 por el intervalo usado anteriormente:
\end_layout

\begin_layout Standard
\begin_inset Formula $tsc/(\frac{1}{18.2}*1000000*intervalo)$
\end_inset


\end_layout

\begin_layout Standard
Esta división deja en eax el valor de la velocidad de la CPU en MHz.
\end_layout

\end_body
\end_document
